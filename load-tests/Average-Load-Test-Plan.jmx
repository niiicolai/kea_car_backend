<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Average-Load-Test-Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:/Users/niiic/Desktop/kea_car_backend/load-tests/average-load-test-config.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">email,password,baseURL</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login Test (5 Concurrent Users, 5 Iterations, Ramp-up 10s)">
        <intProp name="ThreadGroup.num_threads">5</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">5</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.RemoteDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig" testname="jp@gc - Remote Driver Config">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.headless">true</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args">--remote-allow-origins=*</stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="EdgeDriverConfig.additional_args"></stringProp>
          <stringProp name="EdgeDriverConfig.binary_path"></stringProp>
          <boolProp name="FirefoxDriverConfig.general.useragent.override.enabled">false</boolProp>
          <boolProp name="FirefoxDriverConfig.network.negotiate-auth.allow-insecure-ntlm-v1">false</boolProp>
          <collectionProp name="FirefoxDriverConfig.general.extensions"/>
          <collectionProp name="FirefoxDriverConfig.general.preferences"/>
          <intProp name="InternetExplorerDriverConfig.file_upload_dialog_timeout">1000</intProp>
          <boolProp name="InternetExplorerDriverConfig.ensure_clean_session">false</boolProp>
          <boolProp name="InternetExplorerDriverConfig.ignore_protected_mode">false</boolProp>
          <boolProp name="InternetExplorerDriverConfig.silent">false</boolProp>
          <stringProp name="InternetExplorerDriverConfig.initial_browser_url">https://www.bing.com/</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.grid.url">http://127.0.0.1:58012</stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.capability">CHROME</stringProp>
          <boolProp name="RemoteDriverConfig.general.selenium.file.detector">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;

// Config
var driver = WDS.browser;
var timeout = Duration.ofSeconds(30);
var wait = new WebDriverWait(driver, timeout);

// Environment Vars
var email = WDS.vars.get(&apos;email&apos;);
var password = WDS.vars.get(&apos;password&apos;);
var baseURL = WDS.vars.get(&apos;baseURL&apos;);

// Go to login page.
WDS.browser.get(baseURL + &apos;/login&apos;);

// Get email input, password input and login button.
var emailField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;email-login-input&apos;)));
var passwordField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;password-login-input&apos;)));
var loginButton = wait.until(ExpectedConditions.presenceOfElementLocated(By.tagName(&apos;button&apos;)));

// Fill out email and password input.
emailField.sendKeys(email);
passwordField.sendKeys(password);

// Click login button.
loginButton.click();

// Wait until the URL include brands to ensure the user
// is no longer on the login page.
wait.until(ExpectedConditions.urlContains(&quot;brands&quot;));
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion (The final page must show the &apos;Choose a Car Brand&apos; title)" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="988005753">&lt;h4 class=&quot;MuiTypography-root MuiTypography-h4 MuiTypography-alignCenter MuiTypography-gutterBottom css-1fb7dkc&quot; style=&quot;--Typography-textAlign: center;&quot;&gt;Choose a Car Brand&lt;/h4&gt;</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion (Sign-in E2E must take a maximum of 5 second)" enabled="true">
          <stringProp name="DurationAssertion.duration">5000</stringProp>
        </DurationAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer (Wait 30 Seconds between Iterations)" enabled="true">
          <stringProp name="ConstantTimer.delay">30000</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Customer Test (5 Concurrent Users, 5 Iterations, Ramp-up 10s)">
        <intProp name="ThreadGroup.num_threads">5</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">5</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.RemoteDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig" testname="jp@gc - Remote Driver Config" enabled="true">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.headless">true</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args">--remote-allow-origins=*</stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="EdgeDriverConfig.additional_args"></stringProp>
          <stringProp name="EdgeDriverConfig.binary_path"></stringProp>
          <boolProp name="FirefoxDriverConfig.general.useragent.override.enabled">false</boolProp>
          <boolProp name="FirefoxDriverConfig.network.negotiate-auth.allow-insecure-ntlm-v1">false</boolProp>
          <collectionProp name="FirefoxDriverConfig.general.extensions"/>
          <collectionProp name="FirefoxDriverConfig.general.preferences"/>
          <intProp name="InternetExplorerDriverConfig.file_upload_dialog_timeout">1000</intProp>
          <boolProp name="InternetExplorerDriverConfig.ensure_clean_session">false</boolProp>
          <boolProp name="InternetExplorerDriverConfig.ignore_protected_mode">false</boolProp>
          <boolProp name="InternetExplorerDriverConfig.silent">false</boolProp>
          <stringProp name="InternetExplorerDriverConfig.initial_browser_url">https://www.bing.com/</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.grid.url">http://127.0.0.1:58012</stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.capability">CHROME</stringProp>
          <boolProp name="RemoteDriverConfig.general.selenium.file.detector">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.Random;

// A method for generating a random string
def generateRandomString(int length) {
    String characters = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&apos;
    StringBuilder randomString = new StringBuilder()
    Random random = new Random()

    for (int i = 0; i &lt; length; i++) {
        randomString.append(characters.charAt(random.nextInt(characters.length())))
    }
    return randomString.toString()
}

// Config
var driver = WDS.browser;
var timeout = Duration.ofSeconds(30);
var wait = new WebDriverWait(driver, timeout);

// Environment Vars
var email = WDS.vars.get(&apos;email&apos;);
var password = WDS.vars.get(&apos;password&apos;);
var baseURL = WDS.vars.get(&apos;baseURL&apos;);

// Go to login page.
WDS.browser.get(baseURL + &apos;/login&apos;);

// Get email input, password input and login button.
var emailField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;email-login-input&apos;)));
var passwordField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;password-login-input&apos;)));
var loginButton = wait.until(ExpectedConditions.presenceOfElementLocated(By.tagName(&apos;button&apos;)));

// Fill out email and password input.
emailField.sendKeys(email);
passwordField.sendKeys(password);

// Click login button.
loginButton.click();

// Wait until the URL include brands to ensure the user
// is no longer on the login page.
wait.until(ExpectedConditions.urlContains(&quot;brands&quot;));

// Get the customers button.
var customersButton = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&quot;view-customers&quot;)));
// Click the customers button to get to the edit-customer page.
customersButton.click();
// verify it is the edit-customer page.
wait.until(ExpectedConditions.urlContains(&quot;edit-customer&quot;));

// Get the create customer button.
WebElement createCustomerButton = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&quot;create-customer&quot;)))
// Click the create customer button to get to the new-customer page.
createCustomerButton.click();
// verify it is the new-customer page.
wait.until(ExpectedConditions.urlContains(&quot;new-customer&quot;));


// Get the customer form&apos;s input fields and button
var create_firstNameField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;new-customer-first-name-input&apos;)));
var create_lastNameField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;new-customer-last-name-input&apos;)));
var create_emailField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;new-customer-email-input&apos;)));
var create_phoneNumberField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;new-customer-phone-number-input&apos;)));
var create_addressField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;new-customer-address-input&apos;)));
var create_customerButtonField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;save-new-customer-button&apos;)));

// Fill out the input fields with random data
create_firstNameField.sendKeys(&apos;Hans&apos;);
create_lastNameField.sendKeys(&apos;Hansen&apos;);
create_emailField.sendKeys(&quot;hans-&quot; + generateRandomString(10) + &quot;@example.com&quot;);
create_phoneNumberField.sendKeys(&apos;10203040&apos;);
create_addressField.sendKeys(&apos;Randomgade nr. 10 4. tv.&apos;);

// Submit the form
create_customerButtonField.click();

// Wait until the edit-customer page is shown to ensure it was created.
wait.until(ExpectedConditions.urlContains(&quot;edit-customer&quot;));




</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion (The final page must display the &apos;Customers&apos; title)" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="1141251933">&lt;h4 class=&quot;MuiTypography-root MuiTypography-h4 MuiTypography-alignCenter MuiTypography-gutterBottom css-1fb7dkc&quot; style=&quot;--Typography-textAlign: center;&quot;&gt;Customers&lt;/h4&gt;</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion (Sign-in E2E and customer creation must take no more than 10 seconds)" enabled="true">
          <stringProp name="DurationAssertion.duration">10000</stringProp>
        </DurationAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer (Wait 30 Seconds between Iterations)" enabled="true">
          <stringProp name="ConstantTimer.delay">30000</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View Cars Test (5 Concurrent Users, 5 Iterations, Ramp-up 10s)" enabled="true">
        <intProp name="ThreadGroup.num_threads">5</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">5</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.RemoteDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig" testname="jp@gc - Remote Driver Config">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.headless">true</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args">--remote-allow-origins=*</stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="EdgeDriverConfig.additional_args"></stringProp>
          <stringProp name="EdgeDriverConfig.binary_path"></stringProp>
          <boolProp name="FirefoxDriverConfig.general.useragent.override.enabled">false</boolProp>
          <boolProp name="FirefoxDriverConfig.network.negotiate-auth.allow-insecure-ntlm-v1">false</boolProp>
          <collectionProp name="FirefoxDriverConfig.general.extensions"/>
          <collectionProp name="FirefoxDriverConfig.general.preferences"/>
          <intProp name="InternetExplorerDriverConfig.file_upload_dialog_timeout">1000</intProp>
          <boolProp name="InternetExplorerDriverConfig.ensure_clean_session">false</boolProp>
          <boolProp name="InternetExplorerDriverConfig.ignore_protected_mode">false</boolProp>
          <boolProp name="InternetExplorerDriverConfig.silent">false</boolProp>
          <stringProp name="InternetExplorerDriverConfig.initial_browser_url">https://www.bing.com/</stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.grid.url">http://127.0.0.1:58012</stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.capability">CHROME</stringProp>
          <boolProp name="RemoteDriverConfig.general.selenium.file.detector">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;

// Config
var driver = WDS.browser;
var timeout = Duration.ofSeconds(30);
var wait = new WebDriverWait(driver, timeout);

// Environment Vars
var email = WDS.vars.get(&apos;email&apos;);
var password = WDS.vars.get(&apos;password&apos;);
var baseURL = WDS.vars.get(&apos;baseURL&apos;);

// Go to login page.
WDS.browser.get(baseURL + &apos;/login&apos;);

// Get email input, password input and login button.
var emailField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;email-login-input&apos;)));
var passwordField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&apos;password-login-input&apos;)));
var loginButton = wait.until(ExpectedConditions.presenceOfElementLocated(By.tagName(&apos;button&apos;)));

// Fill out email and password input.
emailField.sendKeys(email);
passwordField.sendKeys(password);

// Click login button.
loginButton.click();

// Wait until the URL include brands to ensure the user
// is no longer on the login page.
wait.until(ExpectedConditions.urlContains(&quot;brands&quot;));

// Get the cars button.
var carsButton = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&quot;view-cars&quot;)));
// Click the cars button to get to the cars page.
carsButton.click();
// verify it is the cars page.
wait.until(ExpectedConditions.urlContains(&quot;cars&quot;));
wait.until(ExpectedConditions.presenceOfElementLocated(By.tagName(&apos;h3&apos;)));


</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion (The final page must display the &apos;Cars&apos; title)" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="220704689">&lt;h3 class=&quot;MuiTypography-root MuiTypography-h3 MuiTypography-alignCenter MuiTypography-gutterBottom css-1gltqhd&quot; style=&quot;--Typography-textAlign: center;&quot;&gt;Cars&lt;/h3&gt;</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion (Sign-in E2E and viewing cars must take no more than 6 seconds)" enabled="true">
          <stringProp name="DurationAssertion.duration">6000</stringProp>
        </DurationAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer (Wait 30 Seconds between Iterations)" enabled="true">
          <stringProp name="ConstantTimer.delay">30000</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
