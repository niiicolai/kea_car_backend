name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  pre-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.39
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: password
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install "fastapi[standard]"
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "DB_USER=root" > .env
          echo "DB_NAME=kea_cars_test" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "SECRET_KEY=secret" >> .env
          echo "WEATHER_API_KEY=secret" >> .env

      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Run SQL Script
        run: |
          mysql -h 127.0.0.1 -u root -p"password" < scripts/mysql_for_test.sql

      - name: Run pytests
        run: |
          pytest

      - name: Ensure coverage is at least 10%
        run: |
          coverage run --source app -m pytest
          coverage report --fail-under=10
    #      coverage html

    #  - name: SCP Coverage report to server
    #    uses: appleboy/scp-action@v0.1.7
    #    with:
    #      host: "${{ secrets.SERVER_HOST }}"
    #      username: ${{ secrets.SERVER_USERNAME }}
    #      key: ${{ secrets.SSH_PRIVATE_KEY }}
    #      source: "./htmlcov"
    #      target: "/coverage-report"

      - name: Pylint score must be at least 7.0
        run: pylint app/* --fail-under=7.0

      - name: Start API Server
        run: |
          fastapi dev main.py &

      - name: Wait for API to be ready
        run: sleep 10

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman collection with Mysql environment (API tests)
        run: newman run ./api-tests/KEA\ Car\ API\ Test.postman_collection.json --environment ./api-tests/KEA\ Car\ Mysql.postman_environment.json

      - name: Clone frontend repository
        uses: actions/checkout@v2
        with:
          repository: OliverRoat/kea_car_frontend
          path: frontend

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Start frontend server
        run: |
          cd frontend
          npm run dev &

      - name: Wait for frontend to be ready
        run: sleep 10

      - name: Install Cypress
        run: |
          cd frontend
          npm install cypress

      - name: Run Cypress tests (E2E)
        run: |
          cd frontend
          npx cypress run

  #deploy-staging:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - pre-test
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2

  #    - name: Create .env file
  #      run: echo "${{ secrets.ENV_FILE }}" > .env

  #    - name: SSH and Remove old files
  #      uses: appleboy/ssh-action@master
  #      with:
  #        host: ${{ secrets.SERVER_HOST }}
  #        username: ${{ secrets.SERVER_USERNAME }}
  #        key: ${{ secrets.SSH_PRIVATE_KEY }}
  #        script: |
  #          rm -rf ${{ secrets.SERVER_LOCATION }}/github/workspace

  #    - name: SCP files to server
  #      uses: appleboy/scp-action@v0.1.7
  #      with:
  #        host: "${{ secrets.SERVER_HOST }}"
  #        username: ${{ secrets.SERVER_USERNAME }}
  #        key: ${{ secrets.SSH_PRIVATE_KEY }}
  #        source: "${{ github.workspace }}"
  #        target: "${{ secrets.SERVER_LOCATION }}"

  #    - name: SSH and Docker build
  #      uses: appleboy/ssh-action@master
  #      with:
  #        host: ${{ secrets.SERVER_HOST }}
  #        username: ${{ secrets.SERVER_USERNAME }}
  #        key: ${{ secrets.SSH_PRIVATE_KEY }}
  #        script: |
  #          cd ${{ secrets.SERVER_LOCATION }}/github/workspace
  #          chmod +x ./scripts/wait-for-it.sh
  #          chmod +x ./scripts/start_and_restore.sh
  #          chmod +x ./scripts/wait_for_sonarqube.sh          
  #          docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
  #          docker-compose -f docker-compose.yaml down
  #          docker-compose -f docker-compose.yaml up -d
  #          docker image prune -f

#  load-test:
#    runs-on: ubuntu-latest
#    needs:
#      - deploy-staging
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v2
#
#      - name: Create reports directory
#        run: mkdir reports
#
#      - name: Wait for App Readiness
#        run: |
#          for i in {1..30}; do
#            echo "Checking if the app is ready (attempt $i)..."
#            if curl -s -o /dev/null -w "%{http_code}" https://staging.c7pixel.com/docs | grep -q "200"; then
#              echo "App is ready!"
#              exit 0
#            fi
#            echo "App is not ready yet. Retrying in 10 seconds..."
#            sleep 10
#          done
#          echo "App did not become ready in time!"
#          exit 1
#
#      - name: Start Server Monitoring
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script: |
#            rm -rf /logs/*
#            nohup sar 1 360 > /logs/cpu_mem_usage.log 2>&1 &
#            nohup iostat -x 1 360 > /logs/disk_usage.log 2>&1 &
#            nohup vmstat 1 360 > /logs/vmstat_usage.log 2>&1 &
#
#      - name: JMeter Test
#        uses: QAInsights/PerfAction@v5.6.2
#        with:
#          test-plan-path: ./load-tests/test-plan.jmx
#          args: "-e -o ./reports/html/"
#
#      - name: Stop Server Monitoring
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script: |
#            killall sar iostat vmstat
#
#      - name: Download SAR log
#        run: |
#          curl -L "https://staging.c7pixel.com/logs/cpu_mem_usage.log" -o ./cpu_mem_usage.log
#
#      - name: Run SAR CPU Data Analyzer
#        run: |
#          docker run --rm -v ${{ github.workspace }}:/data niiicolai/sar-cpu-data-analyzer:latest -i /data/cpu_mem_usage.log -t /data/load-tests/cpu-thresholds-test.json -j /data/cpu-test-results.json -r /data/cpu-test-report.html --ignore-end-lines 3
#
#      - name: SCP Load HTML test reports to server
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: "${{ secrets.SERVER_HOST }}"
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          source: "./reports"
#          target: "/jmeter"
#
#      - name: SCP Load test results to server
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: "${{ secrets.SERVER_HOST }}"
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          source: "./cpu-test-results.json"
#          target: "/cpu-test-results"
#
#      - name: SCP Load test report to server
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: "${{ secrets.SERVER_HOST }}"
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          source: "./cpu-test-report.html"
#          target: "/cpu-test-results"

  deploy-production:
    runs-on: ubuntu-latest
    needs:
#      - deploy-staging
      - pre-test
#      - load-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: SSH and Remove old files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST_PROD }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          script: |
            rm -rf ${{ secrets.SERVER_LOCATION }}/github/workspace

      - name: SCP files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: "${{ secrets.SERVER_HOST_PROD }}"
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          source: "${{ github.workspace }}"
          target: "${{ secrets.SERVER_LOCATION }}"

      - name: SSH and Docker build
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST_PROD }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          script: |
            cd ${{ secrets.SERVER_LOCATION }}/github/workspace
            chmod +x ./scripts/wait-for-it.sh
            chmod +x ./scripts/start_and_restore.sh
            chmod +x ./scripts/wait_for_sonarqube.sh          
            docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
            docker-compose -f docker-compose.yaml down
            docker-compose -f docker-compose.yaml up -d
            docker image prune -f
